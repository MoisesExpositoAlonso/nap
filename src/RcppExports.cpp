// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rowSumsC
NumericVector rowSumsC(NumericMatrix x);
RcppExport SEXP _nap_rowSumsC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsC(x));
    return rcpp_result_gen;
END_RCPP
}
// allelesimCvec
NumericVector allelesimCvec(double mu, double nu, double m, double wAA, double wAa, double waa, double p0, double psource, double Fi, double d, int N, int tmax);
RcppExport SEXP _nap_allelesimCvec(SEXP muSEXP, SEXP nuSEXP, SEXP mSEXP, SEXP wAASEXP, SEXP wAaSEXP, SEXP waaSEXP, SEXP p0SEXP, SEXP psourceSEXP, SEXP FiSEXP, SEXP dSEXP, SEXP NSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type wAA(wAASEXP);
    Rcpp::traits::input_parameter< double >::type wAa(wAaSEXP);
    Rcpp::traits::input_parameter< double >::type waa(waaSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type psource(psourceSEXP);
    Rcpp::traits::input_parameter< double >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(allelesimCvec(mu, nu, m, wAA, wAa, waa, p0, psource, Fi, d, N, tmax));
    return rcpp_result_gen;
END_RCPP
}
// allelesimCmat
NumericMatrix allelesimCmat(double mu, double nu, double m, double wAA, double wAa, double waa, double p0, double psource, double Fi, double d, int N, int tmax, int rep);
RcppExport SEXP _nap_allelesimCmat(SEXP muSEXP, SEXP nuSEXP, SEXP mSEXP, SEXP wAASEXP, SEXP wAaSEXP, SEXP waaSEXP, SEXP p0SEXP, SEXP psourceSEXP, SEXP FiSEXP, SEXP dSEXP, SEXP NSEXP, SEXP tmaxSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type wAA(wAASEXP);
    Rcpp::traits::input_parameter< double >::type wAa(wAaSEXP);
    Rcpp::traits::input_parameter< double >::type waa(waaSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type psource(psourceSEXP);
    Rcpp::traits::input_parameter< double >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< int >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(allelesimCmat(mu, nu, m, wAA, wAa, waa, p0, psource, Fi, d, N, tmax, rep));
    return rcpp_result_gen;
END_RCPP
}
// sample_num
NumericVector sample_num(NumericVector x, int size, bool replace, NumericVector prob);
RcppExport SEXP _nap_sample_num(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_num(x, size, replace, prob));
    return rcpp_result_gen;
END_RCPP
}
// BMsubset
arma::Mat<double> BMsubset(SEXP A, const arma::uvec& myrows, const arma::uvec& mycols);
RcppExport SEXP _nap_BMsubset(SEXP ASEXP, SEXP myrowsSEXP, SEXP mycolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type myrows(myrowsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type mycols(mycolsSEXP);
    rcpp_result_gen = Rcpp::wrap(BMsubset(A, myrows, mycols));
    return rcpp_result_gen;
END_RCPP
}
// upperTmat
arma::vec upperTmat(const arma::mat mat);
RcppExport SEXP _nap_upperTmat(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(upperTmat(mat));
    return rcpp_result_gen;
END_RCPP
}
// Xmvcenter
arma::mat Xmvcenter(arma::mat X);
RcppExport SEXP _nap_Xmvcenter(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Xmvcenter(X));
    return rcpp_result_gen;
END_RCPP
}
// LDrelative
arma::mat LDrelative(SEXP A, arma::uvec m, bool debug);
RcppExport SEXP _nap_LDrelative(SEXP ASEXP, SEXP mSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(LDrelative(A, m, debug));
    return rcpp_result_gen;
END_RCPP
}
// runif_reflect
double runif_reflect(double minhere, double maxhere, double min, double max);
RcppExport SEXP _nap_runif_reflect(SEXP minhereSEXP, SEXP maxhereSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minhere(minhereSEXP);
    Rcpp::traits::input_parameter< double >::type maxhere(maxhereSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(runif_reflect(minhere, maxhere, min, max));
    return rcpp_result_gen;
END_RCPP
}
// test_GPROPOSAL
arma::mat test_GPROPOSAL(double b, double a, double p, double mu, double epi, double svar, double ss, double bw, int iter, bool verbose, int nupdates);
RcppExport SEXP _nap_test_GPROPOSAL(SEXP bSEXP, SEXP aSEXP, SEXP pSEXP, SEXP muSEXP, SEXP epiSEXP, SEXP svarSEXP, SEXP ssSEXP, SEXP bwSEXP, SEXP iterSEXP, SEXP verboseSEXP, SEXP nupdatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type epi(epiSEXP);
    Rcpp::traits::input_parameter< double >::type svar(svarSEXP);
    Rcpp::traits::input_parameter< double >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type nupdates(nupdatesSEXP);
    rcpp_result_gen = Rcpp::wrap(test_GPROPOSAL(b, a, p, mu, epi, svar, ss, bw, iter, verbose, nupdates));
    return rcpp_result_gen;
END_RCPP
}
// PropoS
arma::vec PropoS(int nupdates, double svar);
RcppExport SEXP _nap_PropoS(SEXP nupdatesSEXP, SEXP svarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nupdates(nupdatesSEXP);
    Rcpp::traits::input_parameter< double >::type svar(svarSEXP);
    rcpp_result_gen = Rcpp::wrap(PropoS(nupdates, svar));
    return rcpp_result_gen;
END_RCPP
}
// test_SPROPOSAL
arma::mat test_SPROPOSAL(int nupdates, double svar, int m, int iter, int mode);
RcppExport SEXP _nap_test_SPROPOSAL(SEXP nupdatesSEXP, SEXP svarSEXP, SEXP mSEXP, SEXP iterSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nupdates(nupdatesSEXP);
    Rcpp::traits::input_parameter< double >::type svar(svarSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(test_SPROPOSAL(nupdates, svar, m, iter, mode));
    return rcpp_result_gen;
END_RCPP
}
// test_PRIOR
arma::vec test_PRIOR(arma::vec s, double min, double max, double mean, double svar, double sparsity, int mode);
RcppExport SEXP _nap_test_PRIOR(SEXP sSEXP, SEXP minSEXP, SEXP maxSEXP, SEXP meanSEXP, SEXP svarSEXP, SEXP sparsitySEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type svar(svarSEXP);
    Rcpp::traits::input_parameter< double >::type sparsity(sparsitySEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(test_PRIOR(s, min, max, mean, svar, sparsity, mode));
    return rcpp_result_gen;
END_RCPP
}
// whichS
int whichS(arma::vec s1, arma::vec s2);
RcppExport SEXP _nap_whichS(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(whichS(s1, s2));
    return rcpp_result_gen;
END_RCPP
}
// W_go
arma::vec W_go(const arma::Mat<double> X, const arma::vec s, const int mode, double epi, bool verbose);
RcppExport SEXP _nap_W_go(SEXP XSEXP, SEXP sSEXP, SEXP modeSEXP, SEXP epiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< double >::type epi(epiSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(W_go(X, s, mode, epi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// W_update
arma::vec W_update(const arma::Mat<double> X, const arma::vec s, const int mode, arma::vec w, double epi, bool verbose);
RcppExport SEXP _nap_W_update(SEXP XSEXP, SEXP sSEXP, SEXP modeSEXP, SEXP wSEXP, SEXP epiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type epi(epiSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(W_update(X, s, mode, w, epi, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nap_rowSumsC", (DL_FUNC) &_nap_rowSumsC, 1},
    {"_nap_allelesimCvec", (DL_FUNC) &_nap_allelesimCvec, 12},
    {"_nap_allelesimCmat", (DL_FUNC) &_nap_allelesimCmat, 13},
    {"_nap_sample_num", (DL_FUNC) &_nap_sample_num, 4},
    {"_nap_BMsubset", (DL_FUNC) &_nap_BMsubset, 3},
    {"_nap_upperTmat", (DL_FUNC) &_nap_upperTmat, 1},
    {"_nap_Xmvcenter", (DL_FUNC) &_nap_Xmvcenter, 1},
    {"_nap_LDrelative", (DL_FUNC) &_nap_LDrelative, 3},
    {"_nap_runif_reflect", (DL_FUNC) &_nap_runif_reflect, 4},
    {"_nap_test_GPROPOSAL", (DL_FUNC) &_nap_test_GPROPOSAL, 11},
    {"_nap_PropoS", (DL_FUNC) &_nap_PropoS, 2},
    {"_nap_test_SPROPOSAL", (DL_FUNC) &_nap_test_SPROPOSAL, 5},
    {"_nap_test_PRIOR", (DL_FUNC) &_nap_test_PRIOR, 7},
    {"_nap_whichS", (DL_FUNC) &_nap_whichS, 2},
    {"_nap_W_go", (DL_FUNC) &_nap_W_go, 5},
    {"_nap_W_update", (DL_FUNC) &_nap_W_update, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_nap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
