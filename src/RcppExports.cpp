// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// allelesimCvec
NumericVector allelesimCvec(double mu, double nu, double m, double wAA, double wAa, double waa, double p0, double psource, double Fi, double d, int N, int tmax);
RcppExport SEXP popgensim_allelesimCvec(SEXP muSEXP, SEXP nuSEXP, SEXP mSEXP, SEXP wAASEXP, SEXP wAaSEXP, SEXP waaSEXP, SEXP p0SEXP, SEXP psourceSEXP, SEXP FiSEXP, SEXP dSEXP, SEXP NSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type wAA(wAASEXP);
    Rcpp::traits::input_parameter< double >::type wAa(wAaSEXP);
    Rcpp::traits::input_parameter< double >::type waa(waaSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type psource(psourceSEXP);
    Rcpp::traits::input_parameter< double >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(allelesimCvec(mu, nu, m, wAA, wAa, waa, p0, psource, Fi, d, N, tmax));
    return rcpp_result_gen;
END_RCPP
}
// allelesimCmat
NumericMatrix allelesimCmat(double mu, double nu, double m, double wAA, double wAa, double waa, double p0, double psource, double Fi, double d, int N, int tmax, int rep);
RcppExport SEXP popgensim_allelesimCmat(SEXP muSEXP, SEXP nuSEXP, SEXP mSEXP, SEXP wAASEXP, SEXP wAaSEXP, SEXP waaSEXP, SEXP p0SEXP, SEXP psourceSEXP, SEXP FiSEXP, SEXP dSEXP, SEXP NSEXP, SEXP tmaxSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type wAA(wAASEXP);
    Rcpp::traits::input_parameter< double >::type wAa(wAaSEXP);
    Rcpp::traits::input_parameter< double >::type waa(waaSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type psource(psourceSEXP);
    Rcpp::traits::input_parameter< double >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< int >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(allelesimCmat(mu, nu, m, wAA, wAa, waa, p0, psource, Fi, d, N, tmax, rep));
    return rcpp_result_gen;
END_RCPP
}
// rowSumsC
NumericVector rowSumsC(NumericMatrix x);
RcppExport SEXP popgensim_rowSumsC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSumsC(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"popgensim_allelesimCvec", (DL_FUNC) &popgensim_allelesimCvec, 12},
    {"popgensim_allelesimCmat", (DL_FUNC) &popgensim_allelesimCmat, 13},
    {"popgensim_rowSumsC", (DL_FUNC) &popgensim_rowSumsC, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_popgensim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
